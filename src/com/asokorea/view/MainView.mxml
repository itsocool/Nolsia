<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:panels="com.asokorea.view.panels.*"
		 xmlns:util="com.asokorea.util.*"
		 xmlns:view="com.asokorea.view.*"
		 currentState="{ model.currentState }">
	<fx:Script>
		<![CDATA[
			import com.asokorea.model.enum.Icons;
			import com.asokorea.model.vo.HostVo;
			import com.asokorea.presentation.MainViewPresentationModel;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.collections.Sort;
			import mx.events.DataGridEvent;
			import mx.events.ListEvent;

			[Bindable]
			[Inject]
			public var model:MainViewPresentationModel;

			protected function userCountFunc(item:Object, column:DataGridColumn):String
			{
				var result:String = null;

				if(item["userList"] is IList)
				{
					result = IList(item["userList"]).length.toString();
				}

				return result;
			}

			protected function setColumnSort(dataGrid:DataGrid, colIndex:int, sortDescending:Boolean = false):void
			{
				var list:ArrayCollection = dataGrid.dataProvider as ArrayCollection;
				var col:DataGridColumn = dataGrid.columns[colIndex] as DataGridColumn;

				if(!(list.sort is Sort) || col.sortDescending == !sortDescending)
				{
					dataGrid.validateNow();
					dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false,true,colIndex,null,0,null,null,0));
				}
			}

			protected function onHostClick(event:ListEvent):void
			{
				model.hostItemClick(event);
			}

			protected function image1_clickHandler(event:MouseEvent):void
			{
				model.abortUpdate();
			}

		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace panels "com.asokorea.view.panels.*";
		@namespace util "com.asokorea.util.*";
		@namespace view "com.asokorea.view.*";
		
		.gridColHeader {
			textAlign : center;
		}
		
	</fx:Style>
	<s:states>
		<s:State name="FIRST" />
		<s:State name="OPEN" />
		<s:State name="PROCESS"/>
		<s:State name="BUSY" />
		<s:State name="UPDATE"/>
	</s:states>

	<!-- Background Label -->
	<s:Label includeIn="FIRST" fontSize="120" fontWeight="bold" horizontalCenter="0" rotationZ="27"
			 text="{model.appModel.appName} {model.appModel.appVersionLabel}" textAlpha="0.5" verticalCenter="0" />
	<!-- Background Label -->

	<!-- Task Pop up  -->
	<view:TaskSetting includeIn="FIRST" verticalCenter="0" horizontalCenter="0" />
	<!-- Task Pop up  -->

	<!--main view-->
	<s:BorderContainer id="drushArea" includeIn="BUSY,OPEN,PROCESS,UPDATE" left="10" right="10"
					   top="10" bottom="10" borderWeight="4" cornerRadius="8"
					   enabled.BUSY="false"
					   enabled.UPDATE="false">
		<s:layout>
			<s:VerticalLayout paddingBottom="6" paddingLeft="6" paddingRight="6" paddingTop="6" />
		</s:layout>
		<s:HGroup width="100%">
			<mx:Spacer width="100%"/>
			<mx:LinkButton id="btnUpdate" textAlign="right" icon="{Icons.INFORMATION}" label="Update"
						   click="model.update()" enabled="{model.appModel.updater.hasUpdate}"/>
			<mx:LinkButton textAlign="right" icon="{Icons.SERVER_GO}" label="Task List" click="model.goFirst()"/>
			<mx:LinkButton textAlign="right" icon="{Icons.WRENCH}" label="Settings" click="model.editSettings()"/>
			<mx:LinkButton textAlign="right" icon="{Icons.CANCEL}" label="Close" click="model.exit()"/>
		</s:HGroup>
		<mx:HDividedBox id="leftSidePanel" width="100%" height="100%">
			<s:VGroup width="50%" height="100%">
				<s:HGroup verticalAlign="middle" width="100%" enabled.PROCESS="false">
					<mx:Button id="btnHostListOpen" click="model.browseHostList()"
							   icon="{Icons.PAGE_EXCEL}" mouseChildren="false" buttonMode="true"
							   label="Browse Host file" />
					<mx:TextInput id="txiHostFile" width="100%" editable="false"
								  text="{model.appModel.selectedTaskVo.importHostListFile}"
								  toolTip="{txiHostFile.text}"/>
					<mx:Button click="model.openFile(txiHostFile.text)" mouseChildren="false" buttonMode="true"
							   icon="{Icons.FOLDER_EXPLORE}" label="Open" enabled="{!!txiHostFile.text}" />
				</s:HGroup>
				<mx:HRule width="100%" strokeColor="#000000" />
				<s:HGroup verticalAlign="middle" width="100%">
					<mx:Button id="btnLoadHost" label="Load" click="model.loadHostList()"
							   enabled="{!!txiHostFile.text}"
							   icon="{Icons.ARROW_REFRESH}" mouseChildren="false" buttonMode="true"
							   enabled.PROCESS="false"/>
					<mx:Button id="btnHostListDelete" label="Clear"
							   click="model.clearHostList()"
							   enabled="{!!model.appModel.selectedTaskVo.hostList}" icon="{Icons.DELETE}"
							   mouseChildren="false" buttonMode="true"
							   enabled.PROCESS="false"/>
					<mx:Spacer width="100%"/>
					<mx:Button id="btnStartLoop" label="Start" click="model.start()"
							   enabled="{!!model.appModel.selectedTaskVo.hostList}" icon="{Icons.SERVER_GO}"
							   mouseChildren="false" buttonMode="true"
							   enabled.PROCESS="false"/>
					<mx:Button id="btnStopLoop" label="Stop" click="model.stop()"
							   enabled="false" enabled.PROCESS="true"
							   icon="{Icons.STOP}"  mouseChildren="false" buttonMode="true"/>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" width="100%">
					<s:RadioButton value="All" groupName="hostFilter" label="All({model.appModel.hostCount})" selected="true" />
					<s:RadioButton value="Success" groupName="hostFilter" label="Success({model.appModel.successHostCount})" />
					<s:RadioButton value="Fail" groupName="hostFilter" label="Fail({model.appModel.failHostCount})" />
					<mx:Spacer width="100%"/>
					<!--<mx:Button click="model.onGetUser" label="Get Users"/>-->
				</s:HGroup>
				<mx:DataGrid id="dgHost" dataProvider="{model.appModel.selectedTaskVo.hostList}" width="100%"
							 itemClick="onHostClick(event)" height="100%" change="setColumnSort(dgUser, 0)">
					<mx:columns>
						<mx:DataGridColumn dataField="ip" headerText="IP" width="110" headerStyleName="gridColHeader" />
						<mx:DataGridColumn dataField="hostName" headerText="Hhost Name" width="170" headerStyleName="gridColHeader" />
						<mx:DataGridColumn dataField="isConnected" headerText="Connect" width="60" headerStyleName="gridColHeader"
										   itemRenderer="com.asokorea.view.renderers.SelectedItemRenderer"/>
						<mx:DataGridColumn headerText="Open" width="40" textAlign="right" headerStyleName="gridColHeader"
										   itemRenderer="com.asokorea.view.renderers.CompleteItemRenderer" />
						<mx:DataGridColumn headerText="Error" width="40" textAlign="right" headerStyleName="gridColHeader"
										   itemRenderer="com.asokorea.view.renderers.ErrorItemRenderer" />
						<mx:DataGridColumn labelFunction="userCountFunc" headerText="count" width="60" textAlign="right" headerStyleName="gridColHeader" />
						<mx:DataGridColumn dataField="isDefault" headerText="Standard" textAlign="center" headerStyleName="gridColHeader"
										   itemRenderer="com.asokorea.view.renderers.StandardItemRenderer"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:HRule width="100%" strokeColor="#000000" />
				<s:HGroup verticalAlign="middle" width="100%">
					<mx:Button id="btnLogOpen" click="model.browseLogDir()" icon="{Icons.MAGNIFIER}" label="Browse Log Dir"
							   mouseChildren="false" buttonMode="true" enabled.PROCESS="false"/>
					<mx:TextInput id="txiLogDir" width="100%" editable="false" text="{model.appModel.selectedTaskVo.logPath}"
								  toolTip="{txiLogDir.text}" enabled.PROCESS="false"/>
					<mx:Button click="model.openFile(txiLogDir.text)"  mouseChildren="false" buttonMode="true"
							   icon="{Icons.FOLDER_EXPLORE}" enabled.PROCESS="false" label="Open" />
				</s:HGroup>
			</s:VGroup>
			<mx:TabNavigator width="50%" height="100%" paddingBottom="5" paddingLeft="5"
							 paddingRight="5" paddingTop="5">
				<s:NavigatorContent label="Host user check">
					<s:layout>
						<s:VerticalLayout />
					</s:layout>
					<!--<mx:DataGrid id="dgResult" dataProvider="{model.appModel.selectedTaskVo.hostList}" width="100%"
								 itemClick="onHostClick(event)" height="100%" change="setColumnSort(dgUser, 0)">
						<mx:columns>
							<mx:DataGridColumn dataField="ip" headerText="IP" width="110" headerStyleName="gridColHeader" />
							<mx:DataGridColumn dataField="hostName" headerText="HOST NAME" width="170" headerStyleName="gridColHeader" />
							<mx:DataGridColumn dataField="isConnected" headerText="Connect" width="60" headerStyleName="gridColHeader"
											   itemRenderer="com.asokorea.view.renderers.SelectedItemRenderer"/>
							<mx:DataGridColumn headerText="Open" width="60" textAlign="right" headerStyleName="gridColHeader"
											   itemRenderer="com.asokorea.view.renderers.CompleteItemRenderer" />
							<mx:DataGridColumn headerText="Error" width="60" textAlign="right" headerStyleName="gridColHeader"
											   itemRenderer="com.asokorea.view.renderers.ErrorItemRenderer" />
						</mx:columns>
					</mx:DataGrid>-->
					<mx:VDividedBox id="rightSidePanel" width="100%" height="100%">
						<s:VGroup width="100%" height="75%">
							<s:HGroup includeIn="OPEN" width="100%">
								<s:Button />
								<s:Label />
							</s:HGroup>
							<mx:DataGrid id="dgUser" width="100%" height="100%"
										 dataProvider="{HostVo(dgHost.selectedItem).userList}">
								<mx:columns>
									<mx:DataGridColumn dataField="userName" headerText="UserName" width="100"/>
									<mx:DataGridColumn dataField="privilege" headerText="Privilege" width="100" />
									<mx:DataGridColumn dataField="secret" headerText="Secret" width="100"/>
									<!--<mx:DataGridColumn dataField="hash" headerText="Hash" />-->
								</mx:columns>
							</mx:DataGrid>
						</s:VGroup>
						<panels:TerminalPanel id="terminalPanel" width="100%" height="25%" terminal="{model.appModel.standardOutput}"/>
						<panels:TerminalPanel id="errorPanel" width="100%" height="25%" terminal="{model.appModel.standardError}"
											  includeInLayout="false" visible="false"/>
					</mx:VDividedBox>
				</s:NavigatorContent>
			</mx:TabNavigator>	
		</mx:HDividedBox>
	</s:BorderContainer>

	<!--Busy spinner -->
	<s:BorderContainer includeIn="BUSY,UPDATE" top="90" bottom="90" left="160" right="160" maxWidth="1024" maxHeight="768"
					   borderAlpha=".9" backgroundAlpha=".9" borderWeight="10" cornerRadius="16"
					   verticalCenter="0" horizontalCenter="0">
		<util:Spinner includeIn="BUSY" size="48" verticalCenter="0" horizontalCenter="0" tickColor="#66AAFF" numTicks="18" fadeSpeed="1000" speed="1200"/>
		<mx:Label includeIn="BUSY" width="100%" verticalCenter="100" text="{model.appModel.message}" fontSize="12" textAlign="center" />
		<mx:Image left="16" top="16" click.BUSY="currentState='OPEN'" click.UPDATE="image1_clickHandler(event)" source="{Icons.CANCEL}" />
		<mx:ProgressBar includeIn="UPDATE" left="100" right="100" horizontalCenter="0" mode="event"
						source="{model.appModel.updater.urlStream}" verticalCenter="0"/>
	</s:BorderContainer>
	<!--Busy spinner -->

</s:Group>
