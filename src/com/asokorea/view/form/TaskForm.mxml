<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="600" title.ADD="Add New Taks" title.EDIT="Edit Task"
			   creationComplete.ADD="init(event)"
			   close="close(event)">
	<fx:Script>
		<![CDATA[
			import com.asokorea.model.enum.Icons;
			import com.asokorea.model.vo.TaskVo;
			import com.asokorea.presentation.MainViewPresentationModel;
			import com.asokorea.util.Excel2Xml;
			import com.asokorea.util.Global;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;

			[Bindable]
			[Inject]
			public var model:MainViewPresentationModel;

			[Bindable]
			private var _commands:String;

			[Bindable]
			private var _taskVo:TaskVo;
			
			private var _excelFile:File;
			private var _logDir:File;

			public function get taskVo():TaskVo
			{
				return _taskVo;
			}

			public function set taskVo(value:TaskVo):void
			{
				_taskVo = value;

				if(value && value.sshVo && value.sshVo.commands as ArrayCollection)
				{
					_commands = value.sshVo.commands.source.join("\n");
				}
			}
			
			protected function init(event:FlexEvent):void
			{
				validateNow();
				focusManager.setFocus(txiTaskName);
			}			

			protected function browseDir(event:MouseEvent):void
			{
				_logDir = (taskVo.logPath) ? new File(taskVo.logPath) : null;
				
				if(!_logDir || !_logDir.exists || !_logDir.isDirectory)
				{
					_logDir = new File(Global.DEFAULT_LOG_DIR.nativePath);
				}
				
				_logDir.addEventListener(Event.SELECT, onSelectDir);
				_logDir.browseForDirectory("Select Log Dir");
			}

			protected function onSelectDir(event:Event):void
			{
				_logDir.removeEventListener(Event.SELECT, onSelectDir);
				txiLogDir.text = _logDir.nativePath;
			}

			protected function browseFile(event:MouseEvent):void
			{
				if(_taskVo.importHostListFile)
				{
					_excelFile = new File(_taskVo.importHostListFile);
				}else if(_taskVo.taskBaseDir && _taskVo.taskBaseDir.exists && _taskVo.taskBaseDir.isDirectory)
				{
					_excelFile = new File(_taskVo.taskBaseDir.nativePath);
				}else
				{
					_excelFile = new File(Global.TASK_BASE_DIR.nativePath);
				}
				
				_excelFile.addEventListener(Event.SELECT, onSelectFile);
				_excelFile.browseForOpen("Select Host list File", Excel2Xml.hostFileTypeFilter);
			}

			protected function onSelectFile(event:Event):void
			{
				_excelFile.removeEventListener(Event.SELECT, onSelectFile);
				txiHostFile.text = _excelFile.nativePath;
			}

			protected function save(event:MouseEvent):void
			{
				_taskVo.description = txiDesc.text;
				_taskVo.importHostListFile = txiHostFile.text;
				_taskVo.logPath = txiLogDir.text;
				_taskVo.sshVo.user = txiUser.text;
				_taskVo.sshVo.password = txiPassword.text;
				_taskVo.sshVo.maxConnection = numsMaxConnection.value;
				_taskVo.sshVo.timeout = numsTimeout.value;
				_taskVo.sshVo.autoExit = chkAutoExit.selected;

				var commandsList:ArrayCollection = null;

				if(txaCommands.text && StringUtil.trim(txaCommands.text).length > 0)
				{
					_commands = StringUtil.trim(txaCommands.text);
					var arr:Array = _commands.split(/\n|\r\n/);
					commandsList = new ArrayCollection(arr);
				}

				_taskVo.sshVo.commands = commandsList;
				_taskVo.save();
				
				Alert.show("Task edit.");
				close(null);
			}

			protected function create(event:MouseEvent):void
			{
				_taskVo.load(txiTaskName.text);
				_taskVo.description = txiDesc.text;
				_taskVo.importHostListFile = txiHostFile.text;
				_taskVo.logPath = txiLogDir.text;
				_taskVo.sshVo.user = txiUser.text;
				_taskVo.sshVo.password = txiPassword.text;
				_taskVo.sshVo.maxConnection = numsMaxConnection.value;
				_taskVo.sshVo.timeout = numsTimeout.value;
				_taskVo.sshVo.autoExit = chkAutoExit.selected;				
				_taskVo.save();
				model.appModel.settingsVo.taskList.addItem(_taskVo);
				model.appModel.settingsVo.save();
				
				Alert.show("Task create.");
				close(null);
			}

			protected function close(event:Event):void
			{
				PopUpManager.removePopUp(this);
			}

		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout paddingLeft="15" paddingRight="15" paddingTop="10" paddingBottom="10"/>
	</s:layout>
	<s:states>
		<s:State name="EDIT"/>
		<s:State name="ADD"/>
	</s:states>
	<fx:Declarations>
	</fx:Declarations>
	<s:BorderContainer width="100%">
		<s:layout>
			<s:VerticalLayout paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4" />
		</s:layout>
		<s:HGroup horizontalAlign="center" width="100%" height="28" styleName="formElement" verticalAlign="middle">
			<s:Label width="90" text="Task Name *"/>
			<s:TextInput id="txiTaskName" width="100%" maxChars="40" restrict="0-9A-z_-" text="{_taskVo.taskName}"/>
		</s:HGroup>	
	</s:BorderContainer>

	<s:BorderContainer width="100%" enabled.ADD="{!!txiTaskName.text}">
		<s:layout>
			<s:VerticalLayout paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4" />
		</s:layout>
		<s:Label fontWeight="bold" styleName="InformationLabel" text="Task information"/>
		<s:HGroup width="100%" height="28" styleName="formElement" verticalAlign="middle">
			<s:Label width="90" text="Description"/>
			<s:TextInput id="txiDesc" width="100%" text="{_taskVo.description}"/>
		</s:HGroup>
		<s:HGroup width="100%" height="28" styleName="formElement" verticalAlign="middle">
			<s:Label width="90" text="HostListFile"/>
			<s:TextInput id="txiHostFile" width="100%" text="{_taskVo.importHostListFile}"/>
			<mx:Image width="16" height="16" buttonMode="true" click="browseFile(event)"
					  source="{Icons.MAGNIFIER}"/>
		</s:HGroup> 
		<s:HGroup width="100%" height="28" styleName="formElement" verticalAlign="middle">
			<s:Label width="90" text="Log Directory"/>
			<s:TextInput id="txiLogDir" width="100%" text="{_taskVo.logPath}"/>
			<mx:Image width="16" height="16" buttonMode="true" click="browseDir(event)"
					  source="{Icons.MAGNIFIER}"/>
		</s:HGroup> 
	</s:BorderContainer>

	<s:BorderContainer width="100%" enabled.ADD="{!!txiTaskName.text}">
		<s:layout>
			<s:VerticalLayout paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4" />
		</s:layout>
		<s:Label fontWeight="bold" styleName="InformationLabel" text="SSH Connection Information"/>
		<s:HGroup width="100%" height="28" styleName="formElement" verticalAlign="middle">
			<s:Label text="User" width="90"/>
			<s:TextInput id="txiUser" width="100%" text="{_taskVo.sshVo.user}"/>
			<s:Label text="Password" width="90"/>
			<s:TextInput id="txiPassword" width="100%" displayAsPassword="true"
						 text="{_taskVo.sshVo.password}"/>
		</s:HGroup>
		<s:HGroup width="100%" height="28" styleName="formElement" verticalAlign="middle">
			<s:HGroup width="100%" height="28" styleName="formElement" verticalAlign="middle">
				<s:Label text="TimeOut(ms)" width="90"/>
				<s:NumericStepper id="numsTimeout" width="70" maximum="9999900" minimum="0"
								  stepSize="100" value="5000" value.EDIT="{_taskVo.sshVo.timeout}"/>
			</s:HGroup>
			<s:HGroup width="100%" height="28" styleName="formElement" verticalAlign="middle">
				<s:Label text="Max Connection" width="90"/>
				<s:NumericStepper id="numsMaxConnection" width="70" maximum="200" minimum="0"
								  stepSize="1" value="4" value.EDIT="{_taskVo.sshVo.maxConnection}"/>
			</s:HGroup>
			<s:HGroup width="100%" height="28" styleName="formElement" verticalAlign="middle">
				<s:CheckBox id="chkAutoExit" label="Auto Exit" selected="true" selected.EDIT="{_taskVo.sshVo.autoExit}"/>
			</s:HGroup>
		</s:HGroup>

		<s:HGroup width="100%" height="200" styleName="formElement" verticalAlign="middle">
			<s:Label text="Command List" width="90"/>
			<s:TextArea id="txaCommands" width="100%" height="100%" horizontalScrollPolicy="auto"
						text="{_commands}" verticalScrollPolicy="auto"/>
		</s:HGroup>		
	</s:BorderContainer>

	<s:HGroup width="100%" horizontalAlign="right" enabled.ADD="{!!txiTaskName.text}">
		<mx:Button id="btnSave" includeIn="EDIT" label="Save Task" click="save(event)" icon="{Icons.DISK}"/>
		<mx:Button id="btnAdd" includeIn="ADD" label="Add New Task" click="create(event)" icon="{Icons.ADD}"/>
	</s:HGroup>	

</s:TitleWindow>
